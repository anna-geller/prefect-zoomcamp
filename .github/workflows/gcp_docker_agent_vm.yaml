name: Prefect Agent on GCE

on:
  workflow_dispatch:
    inputs:
      gcp_project_id:
        description: Name of the GCP project ID
        required: true
        default: 'prefect-community'
      region:
        description: GCP region
        required: true
        default: 'us-east1'
        type: string
      zone:
        description: Zone in the selected GCP region
        required: true
        default: 'b'
        type: string
      machine_type:
        description: GCP Compute Engine instance type
        required: true
        default: 'e2-micro'
        type: string
      artifact_repository:
        description: Artifact Registry Repository
        required: true
        default: prefect
        type: string

env:
  PROJECT: ${{ github.event.inputs.gcp_project_id }}
  REGION: ${{ github.event.inputs.region }}
  GCP_AR_REPO: ${{ github.event.inputs.artifact_repository }}
  GCE_INSTANCE: prefect-docker-vm
  GCE_INSTANCE_ZONE: '${{ github.event.inputs.region }}-${{ github.event.inputs.zone }}'  # e.g. us-east1-b
  GCE_INSTANCE_MACHINE_TYPE: ${{ github.event.inputs.machine_type }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    # id-token: write is used by Google auth to request an OpenID Connect JWT Token https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: '${{ env.REGION }}-docker.pkg.dev'
          username: _json_key
          password: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set docker image URI
        run: echo "IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT }}/${{ env.GCP_AR_REPO }}/agent:latest" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        id: build-image
        run: |
          export FLOWS_IMG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT }}/${{ env.GCP_AR_REPO }}/flows:latest"
          docker build --build-arg PREFECT_API_KEY=${{ secrets.PREFECT_API_KEY }} --build-arg PREFECT_API_URL=${{ secrets.PREFECT_API_URL }} -t "${{ env.IMAGE_URI }}" -f Dockerfile.agent .
          docker build -t $FLOWS_IMG .
          docker push "${{ env.IMAGE_URI }}"
          docker push $FLOWS_IMG

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Delete VM if exists
        continue-on-error: true
        run: gcloud compute instances delete "$GCE_INSTANCE" --zone "$GCE_INSTANCE_ZONE" --quiet
      # Scopes defines which services VM needs, SA sets permissions for those
      - name: Deploy
        run: |
          gcloud compute instances create-with-container "$GCE_INSTANCE" \
            --zone "$GCE_INSTANCE_ZONE" \
            --machine-type "$GCE_INSTANCE_MACHINE_TYPE" \
            --service-account "${{ secrets.GCE_SERVICE_ACCOUNT_EMAIL }}" \
            --scopes "cloud-platform" \
            --container-image "${{ env.IMAGE_URI }}"
